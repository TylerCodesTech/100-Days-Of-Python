import random
import time
import json
import requests
import tkinter as tk
from tkinter import messagebox, simpledialog, scrolledtext

def get_joke(category=None):
    try:
        if category:
            url = f"https://official-joke-api.appspot.com/jokes/{category}/random"
            response = requests.get(url)
            jokes = response.json()
            return random.choice(jokes)["setup"] + "\n" + random.choice(jokes)["punchline"]
        else:
            url = "https://official-joke-api.appspot.com/random_joke"
            response = requests.get(url)
            jokes = response.json()
            return jokes["setup"] + "\n" + jokes["punchline"]
    except Exception as e:
        return f"Failed to retrieve joke: {e}"

def get_categories():
    try:
        url = "https://official-joke-api.appspot.com/jokes/categories"
        response = requests.get(url)
        categories = response.json()
        return categories
    except Exception as e:
        return []

def load_preferences():
    try:
        with open("preferences.json", "r") as file:
            preferences = json.load(file)
    except FileNotFoundError:
        preferences = {"category": None, "seen_jokes": [], "dark_mode": False}

    # Ensure 'dark_mode' key exists
    if 'dark_mode' not in preferences:
        preferences['dark_mode'] = False

    return preferences

def save_preferences(data):
    with open("preferences.json", "w") as file:
        json.dump(data, file)

def reset_preferences():
    data = {"category": None, "seen_jokes": [], "dark_mode": False}
    save_preferences(data)
    messagebox.showinfo("Preferences Reset", "Preferences have been reset.")

def display_seen_jokes(preferences):
    seen_jokes_window = tk.Toplevel()
    seen_jokes_window.title("Seen Jokes")
    text_area = scrolledtext.ScrolledText(seen_jokes_window, wrap=tk.WORD, width=50, height=20, bg='black' if preferences['dark_mode'] else 'white', fg='white' if preferences['dark_mode'] else 'black')
    text_area.pack(padx=10, pady=10)
    if preferences["seen_jokes"]:
        for joke in preferences["seen_jokes"]:
            text_area.insert(tk.END, joke + "\n\n")
    else:
        text_area.insert(tk.END, "No jokes have been seen yet.")
    text_area.configure(state='disabled')

def show_joke():
    preferences = load_preferences()
    
    if not preferences["seen_jokes"]:
        for _ in range(10):  # Fetch 10 random jokes to build the seen list "Testing only donmt forget to remove"
            joke = get_joke()
            preferences["seen_jokes"].append(joke)
        save_preferences(preferences)
    
    if preferences["category"]:
        joke = get_joke(preferences["category"])
    else:
        joke = get_joke()
    
    if joke in preferences["seen_jokes"]:
        messagebox.showinfo("Random Joke", "I know this one!")
    else:
        preferences["seen_jokes"].append(joke)
        save_preferences(preferences)
        messagebox.showinfo("Random Joke", joke)

def change_category():
    categories = get_categories()
    if categories:
        category = simpledialog.askstring("Change Category", f"Enter joke category {categories}:")
        if category and category.lower() in categories:
            preferences = load_preferences()
            preferences["category"] = category.lower()
            save_preferences(preferences)
        else:
            messagebox.showerror("Invalid Category", "Please enter a valid category.")
    else:
        messagebox.showerror("Error", "Failed to retrieve categories.")

def toggle_dark_mode():
    preferences = load_preferences()
    preferences["dark_mode"] = not preferences["dark_mode"]
    save_preferences(preferences)
    apply_theme(root, preferences["dark_mode"])

def apply_theme(window, dark_mode):
    bg_color = 'black' if dark_mode else 'white'
    fg_color = 'white' if dark_mode else 'black'
    window.configure(bg=bg_color)
    for widget in window.winfo_children():
        widget.configure(bg=bg_color, fg=fg_color)
        if isinstance(widget, tk.Button):
            widget.configure(activebackground=fg_color, activeforeground=bg_color)

def create_main_window():
    global root
    root = tk.Tk()
    root.title("Random Joke Generator")
    
    preferences = load_preferences()
    
    tk.Button(root, text="Hear another joke", command=show_joke).pack(pady=10)
    tk.Button(root, text="Change joke category", command=change_category).pack(pady=10)
    tk.Button(root, text="View seen jokes", command=lambda: display_seen_jokes(preferences)).pack(pady=10)
    tk.Button(root, text="Reset preferences", command=reset_preferences).pack(pady=10)
    tk.Button(root, text="Toggle Dark Mode", command=toggle_dark_mode).pack(pady=10)
    tk.Button(root, text="Exit", command=root.quit).pack(pady=10)
    
    apply_theme(root, preferences["dark_mode"])
    
    root.mainloop()

if __name__ == "__main__":
    create_main_window()
